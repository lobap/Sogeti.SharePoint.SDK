//===============================================================================
// Microsoft patterns & practices
// SharePoint Guidance version 2.0
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Practices.SPG.Common.ServiceLocation;
using Microsoft.Practices.ServiceLocation;

namespace Microsoft.Practices.SPG.Tests.Components.ServiceLocater
{
    /// <summary>
    /// ActivatingServiceLocatorFactoryTest class contains methods to test ActivatingServiceLocatorFactory
    /// </summary>
    [TestClass]
    public class ActivatingServiceLocatorFactoryTest
    {
        #region Autogenerated Code
        public ActivatingServiceLocatorFactoryTest()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        #endregion

        
        /// <summary>
        /// Test Case to test Create method of ActivatingServiceLocatorFactory
        /// </summary>
        [TestMethod]
        public void ServiceLocatorFactory_CreateTest()
        {
            ActivatingServiceLocatorFactory factory=new ActivatingServiceLocatorFactory();
            IServiceLocator servicelocator = factory.Create();

            Assert.AreEqual(servicelocator.GetType().ToString(), typeof(ActivatingServiceLocator).ToString(),
                "ActivatingServiceLocatorFactory create method failed to craete an object of type ActivatingServiceLocator");            
        }

        /// <summary>
        /// Test Case to test LoadTypeMappings method of ActivatingServiceLocatorFactory by passing a valid Type Mapping object with key value
        /// </summary>
        [TestMethod]
        public void LoadTypeMappings_Test()
        {
            ActivatingServiceLocatorFactory factory = new ActivatingServiceLocatorFactory();
            IServiceLocator servicelocator = factory.Create();

            List<TypeMapping> typeMappings = new List<TypeMapping>();           
            typeMappings.Add(new TypeMapping(typeof(IInterface1), typeof(FirstClass1), "Key1"));

            factory.LoadTypeMappings(servicelocator, typeMappings);
            ActivatingServiceLocator AserviceLoc = servicelocator as ActivatingServiceLocator;
            Assert.IsTrue(AserviceLoc.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = AserviceLoc.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");            
        }

        /// <summary>
        /// Test Case to test LoadTypeMappings method of ActivatingServiceLocatorFactory by passing a valid Type Mapping object without a key value
        /// </summary>
        [TestMethod]
        public void LoadTypeMappings2_Test()
        {
            ActivatingServiceLocatorFactory factory = new ActivatingServiceLocatorFactory();
            IServiceLocator servicelocator = factory.Create();

            List<TypeMapping> typeMappings = new List<TypeMapping>();            
            typeMappings.Add(new TypeMapping(typeof(IInterface1), typeof(FirstClass1), null));

            factory.LoadTypeMappings(servicelocator, typeMappings);
            ActivatingServiceLocator AserviceLoc = servicelocator as ActivatingServiceLocator;
            Assert.IsTrue(AserviceLoc.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = AserviceLoc.GetInstance(typeof(IInterface1));
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1"); 
        }

        /// <summary>
        /// Test Case to test LoadTypeMappings method of ActivatingServiceLocatorFactory by passing a blank Type Mapping object.
        ///  Expectations: Should throw Argument Exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void LoadTypeMappings3_Test()
        {
            ActivatingServiceLocatorFactory factory = new ActivatingServiceLocatorFactory();
            IServiceLocator servicelocator = factory.Create();

            List<TypeMapping> typeMappings = new List<TypeMapping>();            
            typeMappings.Add(new TypeMapping());
            
            factory.LoadTypeMappings(servicelocator, typeMappings);
        }

        /// <summary>
        /// Test Case to test LoadTypeMappings method of ActivatingServiceLocatorFactory by passing a null Type Mapping object.
        /// </summary>
        [TestMethod]        
        public void LoadTypeMappingsNullEmuneration_Test()
        {
            ActivatingServiceLocatorFactory factory = new ActivatingServiceLocatorFactory();
            IServiceLocator servicelocator = factory.Create();           
           
            factory.LoadTypeMappings(servicelocator, null);            
        }
    }
}
