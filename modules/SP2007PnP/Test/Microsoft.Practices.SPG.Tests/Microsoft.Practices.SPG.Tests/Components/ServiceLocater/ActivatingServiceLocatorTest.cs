//===============================================================================
// Microsoft patterns & practices
// SharePoint Guidance version 2.0
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Practices.SPG.Common.ServiceLocation;


namespace Microsoft.Practices.SPG.Tests.Components.ServiceLocater
{
    /// <summary>
    /// ActivatingServiceLocatorTest class contains methods to test ActivatingServiceLocator
    /// </summary>
    [TestClass]
    public class ActivatingServiceLocatorTest
    {
        #region AutoGenerated
        public ActivatingServiceLocatorTest()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion
        #endregion
                

        #region (3) CreateInstanceFromTypeMapping_Test (3)
        /// <summary>
        /// Validation for CreateInstanceFromTypeMapping method by passing in valid TypeMapping object
        /// </summary>
        [TestMethod]
        public void CreateInstanceFromTypeMapping_Test()
        {
            TypeMapping TMapping = new TypeMapping(typeof(IInterface1), typeof(FirstClass1), "Key1");
            object obj1 = ActivatingServiceLocator.CreateInstanceFromTypeMapping(TMapping);

            Assert.IsNotNull(obj1,"CreateInstanceFromTypeMapping method returned null");
            Assert.AreEqual(obj1.GetType().AssemblyQualifiedName,TMapping.ToType,"Create instance did not create the required object");           
        }

        /// <summary>
        /// Validation for CreateInstanceFromTypeMapping method by passing in blank TypeMapping object.
        /// ArgumentNullException is the expectation.
        /// </summary>
        [TestMethod]        
        [ExpectedException(typeof(ArgumentNullException))]
        public void CreateInstanceFromTypeMappingBlankMapping_Test()
        {
            TypeMapping TMapping = new TypeMapping();            
            ActivatingServiceLocator.CreateInstanceFromTypeMapping(TMapping);
        }

        /// <summary>
        /// Validation for CreateInstanceFromTypeMapping method by passing in Null value.
        /// ArgumentNullException is the expectation.
        /// </summary>
        [TestMethod]        
        [ExpectedException(typeof(NullReferenceException))]
        public void CreateInstanceFromTypeMappingBlankMappingNull_Test()
        {            
             ActivatingServiceLocator.CreateInstanceFromTypeMapping(null);         
        }
        #endregion

        #region (6) RegisterTypeMapping overloads

        #region (1) public ActivatingServiceLocator RegisterTypeMapping<TFrom, TTo>()

        /// <summary>
        /// To validate the RegisterTypeMapping<TFrom, TTo> by passing valid values
        /// </summary>
        [TestMethod]
        public void RegisterTypeMapping_From_To_Test()
        {            
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping<IInterface1, FirstClass1>();

            Assert.IsNotNull(ASLocator2, "RegisterTypeMapping method returned null");
            Assert.AreEqual(ASLocator2.GetType().ToString(), ASLocator.GetType().ToString(), "Return type does not match ActivatingServiceLocator");
            Assert.IsTrue(ASLocator2.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = ASLocator.GetInstance(typeof(IInterface1));
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");             
        }
        
        #endregion

        #region (2) public ActivatingServiceLocator RegisterTypeMapping<TFrom, TTo>(InstantiationType instantiationType)

        /// <summary>
        /// To validate the RegisterTypeMapping<TFrom, TTo>(InstantiationType instantiationType) by passing valid inputs
        ///InstantiationType. NewInstanceForEachRequest
        /// </summary>
        [TestMethod]
        public void RegisterTypeMapping_From_To_ITypeTest1()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping<IInterface1, FirstClass1>(InstantiationType.NewInstanceForEachRequest);

            Assert.IsNotNull(ASLocator2, "RegisterTypeMapping method returned null");
            Assert.AreEqual(ASLocator2.GetType().ToString(), ASLocator.GetType().ToString(), "Return type does not match ActivatingServiceLocator");
            Assert.IsTrue(ASLocator2.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = ASLocator.GetInstance(typeof(IInterface1));
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");

            //Code to check for new instance. Objects should be different instances of same class, not a singleton. 
            object FirstClass1Object2 = ASLocator.GetInstance(typeof(IInterface1));
            Assert.AreNotEqual(FirstClass1Object, FirstClass1Object2);            
        }

        /// <summary>
        /// To validate the RegisterTypeMapping<TFrom, TTo>(InstantiationType instantiationType) by passing valid inputs
        /// InstantiationType.AsSingleton
        /// </summary>
        [TestMethod]
        public void RegisterTypeMapping_From_To_ITypeTest2()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping<IInterface1, FirstClass1>(InstantiationType.AsSingleton);

            Assert.IsNotNull(ASLocator2, "RegisterTypeMapping method returned null");
            Assert.AreEqual(ASLocator2.GetType().ToString(), ASLocator.GetType().ToString(), "Return type does not match ActivatingServiceLocator");
            Assert.IsTrue(ASLocator2.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = ASLocator.GetInstance(typeof(IInterface1));
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");

            //Singleton instance check.
            object FirstClass1Object2 = ASLocator.GetInstance(typeof(IInterface1));
            Assert.AreEqual(FirstClass1Object, FirstClass1Object2);

            //reregistration checking for Singleton.            
            ASLocator.RegisterTypeMapping<IInterface1, FirstClass1>(InstantiationType.AsSingleton);
            object FirstClass1Object3 = ASLocator.GetInstance(typeof(IInterface1));
            Assert.AreEqual(FirstClass1Object, FirstClass1Object3); 
        }
              
        #endregion

        #region (2) public ActivatingServiceLocator RegisterTypeMapping<TFrom, TTo>(string key, InstantiationType instantiationType)

        /// <summary>
        /// To validate the RegisterTypeMapping<TFrom, TTo>(string key, InstantiationType instantiationType) by passing valid inputs
        ///InstantiationType. NewInstanceForEachRequest
        /// </summary>
        [TestMethod]
        public void RegisterTypeMapping_From_To_ITypeTestKey1()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping<IInterface1, FirstClass1>("Key1",InstantiationType.NewInstanceForEachRequest);

            Assert.IsNotNull(ASLocator2, "RegisterTypeMapping method returned null");
            Assert.AreEqual(ASLocator2.GetType().ToString(), ASLocator.GetType().ToString(), "Return type does not match ActivatingServiceLocator");
            Assert.IsTrue(ASLocator2.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = ASLocator.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");

            //Code to check for new instance. Objects should be different instances of same class, not a singleton. 
            object FirstClass1Object2 = ASLocator.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreNotEqual(FirstClass1Object, FirstClass1Object2);            
        }

        /// <summary>
        /// To validate the RegisterTypeMapping<TFrom, TTo>(string key, InstantiationType instantiationType) by passing valid inputs
        /// InstantiationType.AsSingleton
        /// </summary>
        [TestMethod]
        public void RegisterTypeMapping_From_To_ITypeTestKey2()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping<IInterface1, FirstClass1>("Key1", InstantiationType.AsSingleton);

            Assert.IsNotNull(ASLocator2, "RegisterTypeMapping method returned null");
            Assert.AreEqual(ASLocator2.GetType().ToString(), ASLocator.GetType().ToString(), "Return type does not match ActivatingServiceLocator");
            Assert.IsTrue(ASLocator2.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = ASLocator.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");

            //Singleton instance check.
            object FirstClass1Object2 = ASLocator.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreEqual(FirstClass1Object, FirstClass1Object2);

            //reregistration checking for Singleton.
            ASLocator.RegisterTypeMapping<IInterface1, FirstClass1>("Key1", InstantiationType.AsSingleton);
            object FirstClass1Object3 = ASLocator.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreEqual(FirstClass1Object, FirstClass1Object3);               
        }      

        #endregion

        #region (1)  public ActivatingServiceLocator RegisterTypeMapping<TFrom, TTo>(string key)

        /// <summary>
        /// To validate the RegisterTypeMapping<TFrom, TTo>(string key) by passing valid inputs
        /// </summary>
        [TestMethod]
        public void RegisterTypeMapping_From_To_Key1()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping<IInterface1, FirstClass1>("Key1");

            Assert.IsNotNull(ASLocator2, "RegisterTypeMapping method returned null");
            Assert.AreEqual(ASLocator2.GetType().ToString(), ASLocator.GetType().ToString(), "Return type does not match ActivatingServiceLocator");
            Assert.IsTrue(ASLocator2.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = ASLocator.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");
        }       

        #endregion

        #endregion

        #region (7) RegisterTypeMapping(Type fromType, Type toType) overloads

        #region (3) public ActivatingServiceLocator RegisterTypeMapping(Type fromType, Type toType)

        /// <summary>
        /// To Validate RegisterTypeMapping(Type fromType, Type toType) by passing valid inputs
        /// </summary>
        [TestMethod]
        public void RegisterTypeMapping_Test1()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();            
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(typeof(IInterface1), typeof(FirstClass1));

            Assert.IsNotNull(ASLocator2, "RegisterTypeMapping method returned null");
            Assert.AreEqual(ASLocator2.GetType().ToString(), ASLocator.GetType().ToString(), "Return type does not match ActivatingServiceLocator");
            Assert.IsTrue(ASLocator2.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object =  ASLocator.GetInstance(typeof(IInterface1));
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");   
        }

        /// <summary>
        /// Negative.To Validate RegisterTypeMapping(Type fromType, Type toType) by passing in two interfaces.
        /// Expectations: Should not get registered, Should throw Argument Exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void RegisterTypeMapping_Test2()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(typeof(IInterface1), typeof(IInterface2));
        }

        /// <summary>
        /// Negative.To Validate RegisterTypeMapping(Type fromType, Type toType) by passing a class that do not
        /// implement the interface. 
        /// Expectations: Should not get registered, Should throw Argument Exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void RegisterTypeMapping_Test3()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(typeof(IInterface1), typeof(SecondClass1));
        }
        #endregion

        #region (4) public ActivatingServiceLocator RegisterTypeMapping(Type fromType, Type toType, string key, InstantiationType instantiationType)

        /// <summary>
        /// To Validate RegisterTypeMapping(Type fromType, Type toType, string key, InstantiationType instantiationType)
        /// by passing valid inputs. InstantiationType.NewInstanceForEachRequest
        /// </summary>
        [TestMethod]
        public void RegisterTypeMapping_K_IType_Test1()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(typeof(IInterface1), typeof(FirstClass1)
                ,"Key1",InstantiationType.NewInstanceForEachRequest);

            Assert.IsNotNull(ASLocator2, "RegisterTypeMapping method returned null");
            Assert.AreEqual(ASLocator2.GetType().ToString(), ASLocator.GetType().ToString(), "Return type does not match ActivatingServiceLocator");
            Assert.IsTrue(ASLocator2.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = ASLocator.GetInstance(typeof(IInterface1),"Key1");
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");            
            
            //Code to check for new instance. Objects should be different instances of same class, not a singleton. 
            object FirstClass1Object2 = ASLocator.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreNotEqual(FirstClass1Object, FirstClass1Object2);
        }

        /// <summary>
        /// Negative.To Validate RegisterTypeMapping(Type fromType, Type toType, string key, InstantiationType instantiationType)
        /// by passing in two interfaces.
        /// Expectations: Should not get registered, Should throw Argument Exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void RegisterTypeMapping_K_IType_Test2()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(typeof(IInterface1), typeof(IInterface2)
                , "Key1", InstantiationType.NewInstanceForEachRequest);           
        }

        /// <summary>
        /// Negative.To Validate RegisterTypeMapping(Type fromType, Type toType, string key, InstantiationType instantiationType)
        /// by passing a class that do not implement the interface.
        /// Expectations: Should not get registered, Should throw Argument Exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void RegisterTypeMapping_K_IType_Test3()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(typeof(IInterface1), typeof(SecondClass1)
                , "Key1", InstantiationType.NewInstanceForEachRequest);
        }

        /// <summary>
        /// To Validate RegisterTypeMapping(Type fromType, Type toType, string key, InstantiationType instantiationType)
        /// by passing valid inputs. InstantiationType.AsSingleton
        /// </summary>
        [TestMethod]
        public void RegisterTypeMapping_K_IType_Test4()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(typeof(IInterface1), typeof(FirstClass1)
                , "Key1", InstantiationType.AsSingleton);


            Assert.IsNotNull(ASLocator2, "RegisterTypeMapping method returned null");
            Assert.AreEqual(ASLocator2.GetType().ToString(), ASLocator.GetType().ToString(), "Return type does not match ActivatingServiceLocator");
            Assert.IsTrue(ASLocator2.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = ASLocator.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");

            //Singleton instance check.
            object FirstClass1Object2 = ASLocator.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreEqual(FirstClass1Object, FirstClass1Object2);  

            //reregistration checking for Singleton.
            ASLocator.RegisterTypeMapping(typeof(IInterface1), typeof(FirstClass1), "Key1", InstantiationType.AsSingleton);
            object FirstClass1Object3 = ASLocator.GetInstance(typeof(IInterface1), "Key1");
            Assert.AreEqual(FirstClass1Object, FirstClass1Object3);           
        }
        #endregion

        #endregion

        #region (4) public ActivatingServiceLocator RegisterTypeMapping(TypeMapping mapping)

        /// <summary>
        /// To Validate RegisterTypeMapping(TypeMapping mapping) by passing ivalid inputs
        /// </summary>
        [TestMethod]
        public void RegisterTypeMapping1()
        {
            TypeMapping TMapping = new TypeMapping(typeof(IInterface1), typeof(FirstClass1), "Key1");

            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(TMapping);

            Assert.IsNotNull(ASLocator2, "RegisterTypeMapping method returned null");
            Assert.AreEqual(ASLocator2.GetType().ToString(), ASLocator.GetType().ToString(), "Return type does not match ActivatingServiceLocator");
            Assert.IsTrue(ASLocator2.IsTypeRegistered<IInterface1>(), "Failed to register the type");
            object FirstClass1Object = ASLocator.GetInstance(typeof(IInterface1),"Key1");
            Assert.AreEqual(FirstClass1Object.GetType().Name, "FirstClass1");
        }

        /// <summary>
        /// Negative.To Validate RegisterTypeMapping(TypeMapping mapping) by passing in two interfaces.
        /// Expectations: Should not get registered, Should throw Argument Exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void RegisterTypeMapping2()
        {
            TypeMapping TMapping = new TypeMapping(typeof(IInterface1), typeof(IInterface2), "Key1");

            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(TMapping);
        }

        /// <summary>
        /// Negative.To Validate RegisterTypeMapping(TypeMapping mapping)  by passing a class that do not 
        /// implement the interface.
        /// Expectations: Should not get registered, Should throw Argument Exception.
        /// </summary>
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void RegisterTypeMapping3()
        {
            TypeMapping TMapping = new TypeMapping(typeof(IInterface1), typeof(SecondClass1), "Key1");

            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(TMapping);
        }

        /// <summary>
        /// Negative.To Validate RegisterTypeMapping(TypeMapping mapping)  by passing Null
        /// Expectations: Should not get registered, Should throw NullReferenceException Exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(NullReferenceException))]
        public void RegisterTypeMapping4()
        {
            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ActivatingServiceLocator ASLocator2 = ASLocator.RegisterTypeMapping(null);                   
        }

        #endregion

        #region (2) public bool IsTypeRegistered<TService>()

        /// <summary>
        /// To Validate IsTypeRegistered by passing valid inputs
        /// </summary>
        [TestMethod]
        public void IsTypeRegistered_Test1()
        {
            TypeMapping TMapping = new TypeMapping(typeof(IInterface1), typeof(FirstClass1), "Key1");

            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ASLocator.RegisterTypeMapping(TMapping);

            Assert.IsTrue(ASLocator.IsTypeRegistered<IInterface1>(), "IsTypeRegistered returned false for a valid TypeMapping Registration. Should be verified");
        }

        /// <summary>
        /// Negative.To Validate IsTypeRegistered by passing a class that do not implement the corresponding interface.
        /// Expectations: Should not get registered, Should throw Argument Exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void IsTypeRegistered_Test2()
        {
            TypeMapping TMapping = new TypeMapping(typeof(IInterface1), typeof(SecondClass1), "Key1");

            ActivatingServiceLocator ASLocator = new ActivatingServiceLocator();
            ASLocator.RegisterTypeMapping(TMapping);

            Assert.IsFalse(ASLocator.IsTypeRegistered<IInterface1>(), "IsTypeRegistered returned true for an invalid TypeMapping Registration input. Should be verified");
        }

        #endregion
    }
}
