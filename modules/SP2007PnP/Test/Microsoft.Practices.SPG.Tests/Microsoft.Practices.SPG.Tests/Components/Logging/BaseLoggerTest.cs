//===============================================================================
// Microsoft patterns & practices
// SharePoint Guidance version 2.0
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Practices.SPG.Common.Logging;
using System.Diagnostics;
using System.IO;

using Microsoft.SharePoint.Administration;

namespace Microsoft.Practices.SPG.Tests.Components.Logging
{
    /// <summary>
    /// Summary description for BaseLoggerTest
    /// </summary>
    [TestClass]
    public class BaseLoggerTest
    {
        #region Autogenerated
        public BaseLoggerTest()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion
        #endregion

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations method 
        /// </summary>
        [TestMethod]
        public void LogToOperationsTest()
        {
            //public void LogToOperations(string message, int eventId, EventLogEntryType severity, string category)

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            int EID = new Random().Next(1, 20);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.LogToOperations(strMessage, EID, EventLogEntryType.Error, null);

            bool isValidEL = LogUtils.ValidateEventLog(LogUtils.strEventSourceName, EID, strMessage);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage);////Validation for Splog Entries

            //if (isValidEL)
            //    if (isValidSPL)
            //        Assert.IsTrue(true);
            //    else
            //        Assert.Fail("No entry is made in Share point Logs");
            //else
            //    Assert.Fail("No entry is made in Event Logs");

            if (isValidSPL)
                if (isValidEL)
                    Assert.IsTrue(true);
                else
                    Assert.Fail("No entry is made in Event Logs");
            else
                Assert.Fail("No entry is made in Share point Logs");

        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper method 
        /// </summary>
        [TestMethod]
        public void TraceToDeveloperTest()
        {
            //public void TraceToDeveloper(string message, int eventId, TraceSeverity severity, string category)          

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            int EID = new Random().Next(1, 20);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.TraceToDeveloper(strMessage, EID, TraceSeverity.Medium, null);
            
            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage);//Validation for Splog Entries

            if (isValidSPL)
                Assert.IsTrue(true);
            else
                Assert.Fail("No entry is made in Share point Logs");            

        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations overload method which requires exception instance
        /// </summary>
        [TestMethod]
        public void LogToOperationsTest_WithExceptionMsg()
        {
            /*public void LogToOperations(Exception exception, string additionalMessage, int eventId,
                                             EventLogEntryType severity, string category)*/
            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + new Random(100).Next(100, 500);
            Exception ex = new Exception(strExceptionMsg);

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            int EID = new Random().Next(1, 20);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.LogToOperations(ex, strMessage, EID, EventLogEntryType.Error, null);

            bool isValidEL = LogUtils.ValidateEventLog(LogUtils.strEventSourceName, EID, strMessage,strExceptionMsg);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg);////Validation for Splog Entries

            //if (isValidEL)
            //    if (isValidSPL)
            //        Assert.IsTrue(true);
            //    else
            //        Assert.Fail("No entry is made in Share point Logs");
            //else
            //    Assert.Fail("No entry is made in Event Logs");

            if (isValidSPL)
                if (isValidEL)
                    Assert.IsTrue(true);
                else
                    Assert.Fail("No exception entry is made in Event Logs");
            else
                Assert.Fail("No exception entry is made in Share point Logs");

        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper overload method which takes in exception instance
        /// </summary>
        [TestMethod]
        public void TraceToDeveloperTest_WithException()
        {
            /*public void TraceToDeveloper(Exception exception, string additionalMessage, int eventId,
                                              TraceSeverity severity, string category)  */

            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + new Random(100).Next(100, 500);
            Exception ex = new Exception(strExceptionMsg);

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            int EID = new Random().Next(1, 20);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            //spLogger.TraceToDeveloper(strMessage, EID, TraceSeverity.Medium, null);
            spLogger.TraceToDeveloper(ex, strMessage, EID, TraceSeverity.Medium, null);

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg);//Validation for Splog Entries

            if (isValidSPL)
                Assert.IsTrue(true);
            else
                Assert.Fail("No exception entry is made in Share point Logs");

        }
    }
}
