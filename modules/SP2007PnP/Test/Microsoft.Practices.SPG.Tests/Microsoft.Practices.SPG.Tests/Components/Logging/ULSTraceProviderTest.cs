//===============================================================================
// Microsoft patterns & practices
// SharePoint Guidance version 2.0
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
using Microsoft.Practices.SPG.Common.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Reflection;
using Microsoft.SharePoint.Administration;

namespace Microsoft.Practices.SPG.Tests
{
    
    
    /// <summary>
    ///This is a test class for ULSTraceProviderTest and is intended
    ///to contain all ULSTraceProviderTest Unit Tests
    ///</summary>
    [TestClass()]
    public class ULSTraceProviderTest
    {

        #region Autogenerated
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        #endregion

        /// <summary>
        ///A test for UnregisterTraceProvider
        ///</summary>
        [TestMethod()]
        public void UnregisterTraceProviderTest()
        {
            bool isUnregistered = true;
            string strErrorMessage=string.Empty;
            string strMessage = "Custom Message by Automation Test Code.";
            try
            {
                TraceLogger tLogger = new TraceLogger();
                tLogger.Trace(strMessage, 9, TraceSeverity.Medium, "Test Case");
            }
            catch (System.Exception ex)
            {
                isUnregistered = false;
                strErrorMessage = ex.Message;
            }
            if (isUnregistered)
                Assert.IsTrue(true);
            else
                Assert.Fail(strErrorMessage);

            #region oldscrap code
            // bool isUnregistered = true;
           // string strErrorMessage=string.Empty;
           // //try
           // //{
           // //    //System.Type type = typeof(ULSTraceProvider);
           // //    ////MethodInfo mi = type.in.GetMethod("UnregisterTraceProvider", BindingFlags.Static);
           // //    //type.InvokeMember("UnregisterTraceProvider", BindingFlags.Static|BindingFlags.Public|BindingFlags.InvokeMethod,null,null,null);
           // //    ////ULSTraceProvider.UnregisterTraceProvider();
           // //}
           // //catch (System.Exception ex)
           // //{
           // //    strErrorMessage = ex.Message;
           // //    isUnregistered = false;
           // //}
           // if (isUnregistered)
           //     Assert.IsTrue(true);
           // else
           //     Assert.Fail(strErrorMessage);
            //// Assert.Inconclusive("A method that does not return a value cannot be verified.");
            #endregion
        }

        /// <summary>
        ///A test for RegisterTraceProvider
        ///</summary>
        [TestMethod()]
        public void RegisterTraceProviderTest()
        {
            bool isRegistered = true;
            string strErrorMessage = string.Empty;
            string strMessage = "Custom Message by Automation Test Code.";

            try
            {
                TraceLogger tLogger = new TraceLogger();
                tLogger.Trace(strMessage, 9, TraceSeverity.Medium, "Test Case");
            }
            catch (System.Exception ex)
            {
                strErrorMessage = ex.Message;
                isRegistered = false;
            }
            if (isRegistered)
                Assert.IsTrue(true);
            else
                Assert.Fail(strErrorMessage);
        }
    }
}
