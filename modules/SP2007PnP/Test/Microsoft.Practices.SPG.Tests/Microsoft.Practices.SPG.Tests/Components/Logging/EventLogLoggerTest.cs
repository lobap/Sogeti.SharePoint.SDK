//===============================================================================
// Microsoft patterns & practices
// SharePoint Guidance version 2.0
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LogModule =  Microsoft.Practices.SPG.Common;

using System.Diagnostics;

namespace Microsoft.Practices.SPG.Tests.Components.Logging
{
    /// <summary>
    /// Summary description for EventLogLoggerTest
    /// </summary>
    [TestClass]
    public class EventLogLoggerTest
    {
        #region AutoGenerated
        public EventLogLoggerTest()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        #endregion


        string strEventSourceName = "Office Sharepoint Server";
        /// <summary>
        /// Test Case to Test Log method of EventLogLogger
        /// </summary>
        [TestMethod]
        public void LogTest()
        {
            ////public void Log(string message, int eventId, EventLogEntryType severity, string category)
            //string strMess="Custom message from Nanda";
            string strMess = "Custom message from Test Automation";

            int EID = new Random().Next(1, 20);
            LogModule.Logging.EventLogLogger eLogger = new LogModule.Logging.EventLogLogger();
            eLogger.Log(strMess, EID, EventLogEntryType.Error, "");

            bool isValid = LogUtils.ValidateEventLog(strEventSourceName, EID, strMess);

            if (isValid)
                Assert.IsTrue(true);
            else
                Assert.Fail("Message did not get logged in Eventlog, but entry is made");

            #region Old Commented Moved to logutils
            //using (EventLog log = new EventLog("Application", System.Environment.MachineName, strEventSourceName))
            //{
            //    foreach (EventLogEntry entry in log.Entries)
            //    {
            //        if (entry.EntryType == System.Diagnostics.EventLogEntryType.Error)
            //        {
            //            //if (entry.Message == strMess && entry.EventID==5)
            //            if (entry.Source == strEventSourceName)
            //                if (entry.InstanceId == EID)
            //                    if (entry.Message == strMess)
            //                        Assert.IsTrue(true);
            //                    else
            //                        Assert.Fail("Message did not get logged in Eventlog, but entry is made");
            //        }
            //    }
            //}
            #endregion
        }

        /// <summary>
        /// Test Case to Test Log method of EventLogLogger by passing empty values if possible
        /// </summary>
        [TestMethod]
        public void LogTestNegative()
        {
            ////public void Log(string message, int eventId, EventLogEntryType severity, string category)            
           // string strMess = "Custom message from Test Automation";

            int EID = new Random().Next(1, 20);
            LogModule.Logging.EventLogLogger eLogger = new LogModule.Logging.EventLogLogger();
            eLogger.Log(string.Empty, EID,EventLogEntryType.Warning, null);


            using (EventLog log = new EventLog("Application", System.Environment.MachineName, strEventSourceName))
            {
                foreach (EventLogEntry entry in log.Entries)
                {
                    if (entry.EntryType == System.Diagnostics.EventLogEntryType.Error)
                    {
                        //if (entry.Message == strMess && entry.EventID==5)
                        if (entry.Source == strEventSourceName)
                            if (entry.InstanceId == EID)
                                if (entry.Message == string.Empty)
                                    Assert.Fail("There was an entry in Eventlog, which is not the expected one");
                                else
                                    Assert.IsTrue(true);
                    }
                }
            }
        }

        //string strEventSourceName = "Nanda Event";
        #region WorkingCode
        /// <summary>
        /// Not a test case. Used to validate code functionality for clarification
        /// </summary>
        [TestMethod]
        public void WorkingCode()
        {
            string strEventSourceName = "Automation Event";//Office Sharepoint Server
            string strMess = "Custom message from Automation Test";
            if (!EventLog.SourceExists(strEventSourceName))
            {
                EventLog.CreateEventSource(strEventSourceName, "Application");
            }
            EventLog.WriteEntry(strEventSourceName, strMess, EventLogEntryType.Error, 11);
        }
        #endregion

        #region Scrap
        //[TestMethod]
        //public void LogTest()
        //{
        //    //public void Log(string message, int eventId, EventLogEntryType severity, string category)
        //    string strMess = "Custom message from Nanda";
        //    LogModule.Logging.EventLogLogger eLogger = new LogModule.Logging.EventLogLogger();
        //    eLogger.Log(strMess, 5, System.Diagnostics.EventLogEntryType.Error, "");

        //    using (System.Diagnostics.EventLog log = new System.Diagnostics.EventLog("Application", System.Environment.MachineName, strEventSourceName))
        //    {
        //        foreach (System.Diagnostics.EventLogEntry entry in log.Entries)
        //        {
        //            if (entry.EntryType == System.Diagnostics.EventLogEntryType.Error)
        //            {
        //                if (entry.Message == strMess && entry.EventID == 5)
        //                    Assert.IsTrue(true);
        //            }
        //        }
        //    }
        //    //System.Diagnostics.EventLog.CreateEventSource(this.EventSourceName, "Application");
        //}
        #endregion
    }
}
