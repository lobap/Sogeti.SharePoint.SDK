//===============================================================================
// Microsoft patterns & practices
// SharePoint Guidance version 2.0
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Practices.SPG.Common.Logging;
using System.IO;
using Microsoft.SharePoint.Administration;

namespace Microsoft.Practices.SPG.Tests.Components.Logging
{
    /// <summary>
    /// Summary description for TraceLoggerTest
    /// </summary>
    [TestClass]
    public class TraceLoggerTest
    {
        #region Autogenerated
        public TraceLoggerTest()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        #endregion

        /// <summary>
        /// Test Case to Validate Trace Method of TraceLogger class
        /// </summary>
        [TestMethod]
        public void TraceTest()
        {
            //string EID = Guid.NewGuid().ToString("N");
            //string strMessage = "Custom Message by Nanda"; 
            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            try
            {
                TraceLogger tLogger = new TraceLogger();
                tLogger.Trace(strMessage, 9, TraceSeverity.Medium, "Test Case");

                bool isValid = LogUtils.ValidateSPLogs(strMessage);

                if (isValid)
                    Assert.IsTrue(true);
                else
                    Assert.Fail("There is no entry of message in Moss Log");
            }
            catch (System.Exception ex)
                {
                    Assert.Fail("Test case failed probably due to trace registrations problems "+ex.Message);
                }
        }

        #region Old Commented Moved to LogUtils
        //public static void ValidateSPLogs(string strMatch)
        //{
        //    string strLogHive = @"C:\Program Files\Common Files\Microsoft Shared\web server extensions\12\LOGS";

        //    StringBuilder sb = new StringBuilder();
        //    sb.Append(Environment.MachineName + "-" + DateTime.Now.Date.ToString("yyyyMMdd") + "-" + DateTime.Now.ToString("HH"));

        //    string[] Files = Directory.GetFiles(strLogHive, sb.ToString() + "*.log");

        //    if (Files.Length == 1)
        //    {
        //        SearchLogEntry(Files[0],strMatch);
        //    }
        //    else
        //    {
        //        int[] Fnames = new int[Files.Length];
        //        for (int i = 0; i < Fnames.Length; i++)
        //        {
        //            int idx=Files[i].IndexOf(".log");
        //            Fnames[i] = int.Parse( Files[i].Substring(idx - 4, 4));
        //        }
        //        int max = 0;                
        //        for (int i = 0; i < Fnames.Length; i++)
        //        {
        //            if (Fnames[i] > max)
        //                max = Fnames[i];
        //        }
        //        for (int i = 0; i < Fnames.Length; i++)
        //        {
        //            if (Fnames[i] == max)
        //                SearchLogEntry(Files[i], strMatch);
        //        }
        //    }
        //}

        //private static void SearchLogEntry(string p, string strMatch)
        //{
        //    string strval=string.Empty;
        //    bool found=false;

        //    string strCopyLocation=@"C:\TempMossLogs\";

        //    if (!Directory.Exists(strCopyLocation))
        //        Directory.CreateDirectory(strCopyLocation);

        //    //Degub mode is working fine but run is failing. So delay should be introduced.
        //    System.Threading.Thread.Sleep(1500);//To Ensure that actual log file is properly written.
        //    string strfname = Path.GetFileName(p);
        //    File.Copy(p, strCopyLocation + strfname,true);
            
        //    //using (FileStream fs = new FileStream(p, FileMode.Open, FileAccess.Read))
        //    using (FileStream fs = new FileStream(strCopyLocation+strfname, FileMode.Open, FileAccess.Read))
        //    {
        //        System.Threading.Thread.Sleep(100);//To Ensure that file copy is time is taken into account.
        //        using (StreamReader sr = new StreamReader(fs))
        //        {
        //            while ((strval = sr.ReadLine()) != null)
        //            {
        //                if(strval.Contains(strMatch))
        //                {
        //                    found=true;
        //                    break;
        //                }
        //            }
        //        }
        //    }
        //    if(found)
        //        Assert.IsTrue(true);
        //    else
        //        Assert.Fail("There is no entry of message in Moss Log");

        //}
        #endregion
    }
}

