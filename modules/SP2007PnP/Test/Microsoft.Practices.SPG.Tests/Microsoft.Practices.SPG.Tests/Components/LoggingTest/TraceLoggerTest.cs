//===============================================================================
// Microsoft patterns & practices
// SharePoint Guidance version 2.0
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Practices.SPG.Common.Logging;
using System.IO;
using Microsoft.SharePoint.Administration;

namespace Microsoft.Practices.SPG.Tests.Components.Logging
{
    /// <summary>
    /// TraceLoggerTest class contains methods to validate TraceLogger
    /// </summary>
    [TestClass]
    public class TraceLoggerTest
    {
        #region Autogenerated
        public TraceLoggerTest()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        #endregion

        string strCategory = "Test Case-Trace Class";
        int EID = 0;

        /// <summary>
        /// Test Case to Validate Trace Method of TraceLogger class
        /// </summary>
        [TestMethod]//1
        public void TraceTest()
        {                     
            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");            
           
            TraceLogger tLogger = new TraceLogger();
            EID = DateTime.Now.Millisecond + DateTime.Now.Second;
            tLogger.Trace(strMessage, EID, TraceSeverity.Medium, strCategory);

            bool isValid = LogUtils.ValidateSPLogs(strMessage,strCategory,TraceSeverity.Medium,EID);

            tLogger = null;
            Assert.IsTrue(isValid, "There is no entry of message in Moss Log");                           
            
        }
        
        /// <summary>
        /// Test Case to Validate Trace Method of TraceLogger class using message from a XML text file.
        /// This will log the xml string input. New lines will be replaced by double space and content is logged in single line.
        /// There is a limit to message length which we can input
        /// </summary>
        [TestMethod]//2
        public void TraceTest_XMLFileIP()
        {                       
            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            string strMsg2 = string.Empty;
            
            using (FileStream fs = new FileStream(@"..\..\..\Microsoft.Practices.SPG.Tests\Components\LoggingTest\InputTestFileXML.txt", FileMode.Open,FileAccess.Read))
            {
                using (StreamReader sr = new StreamReader(fs))
                {
                    strMsg2 =  sr.ReadToEnd();
                }
            }
            
            TraceLogger tLogger = new TraceLogger();
            EID = DateTime.Now.Millisecond + DateTime.Now.Second;
            tLogger.Trace(strMessage+strMsg2,EID, TraceSeverity.Medium, strCategory);

            bool isValid = LogUtils.ValidateSPLogs(strMessage,strCategory,TraceSeverity.Medium,EID);

            tLogger = null;

            Assert.IsTrue(isValid, "There is no entry of message in Moss Log");
                   
        }        

    }
}

