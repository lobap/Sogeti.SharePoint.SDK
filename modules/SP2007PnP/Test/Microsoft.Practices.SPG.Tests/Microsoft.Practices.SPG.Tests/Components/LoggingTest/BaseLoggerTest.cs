//===============================================================================
// Microsoft patterns & practices
// SharePoint Guidance version 2.0
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Practices.SPG.Common.Logging;
using System.Diagnostics;
using System.IO;

using Microsoft.SharePoint.Administration;

namespace Microsoft.Practices.SPG.Tests.Components.Logging
{
    /// <summary>
    /// Summary description for BaseLoggerTest
    /// </summary>
    [TestClass]
    public class BaseLoggerTest
    {
        string strEventSourceName = string.Empty;
        string strDefaultCategory = "Auot Test Category1";
        TraceSeverity Severity = TraceSeverity.Medium;

        #region Autogenerated
        public BaseLoggerTest()
        {
            strEventSourceName = LogUtils.GetEventSource();//custom statement
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion
        #endregion

        //23
        int EID_Default = 0;// Default value of Event ID in Base logger class. Should be updated if that is changed.
        //Note1: The message will get logged only when the Event ID is equal to 0.
        //Note2: The above Note1 problem is now rectified by configuring Contoso Event Source..

        #region LogToOperations overloads (12)

        #region With Out Exception (7)
        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations method 
        /// public void LogToOperations(string message, int eventId, EventLogEntryType severity, string category)
        /// </summary>
        [TestMethod]//1
        public void LogToOperationsTest()
        {
            //public void LogToOperations(string message, int eventId, EventLogEntryType severity, string category)

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");            
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity=LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.LogToOperations(strMessage, EID_Default, Severity, strDefaultCategory);

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage, strDefaultCategory, TSeverity, EID_Default);////Validation for Splog Entries

            strMessage = string.Format("Category: {0}\n{1}", strDefaultCategory, strMessage);
            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strMessage, Severity);//validation for event log entry
                        
            strMessage = null;
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }       

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations method 
        /// public void LogToOperations(string message)
        /// </summary>
        [TestMethod]//2
        public void LogToOperationsTest2()
        {
            //public void LogToOperations(string message)

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.LogToOperations(strMessage);

            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strMessage,Severity);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage, null, TSeverity, EID_Default);////Validation for Splog Entries            

            strMessage = null;
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations method 
        /// public void LogToOperations(string message, EventLogEntryType severity)
        /// </summary>
        [TestMethod]//3
        public void LogToOperationsTest3()
        {
            //public void LogToOperations(string message, EventLogEntryType severity)
            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.LogToOperations(strMessage, Severity);            

            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strMessage,Severity);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage,null,TSeverity,EID_Default);////Validation for Splog Entries

            strMessage = null;
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations method 
        /// public void LogToOperations(string message, int eventId)
        /// </summary>
        [TestMethod]//4
        public void LogToOperationsTest4()
        {
            //public void LogToOperations(string message, int eventId)
            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.LogToOperations(strMessage, EID_Default);

            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strMessage, Severity);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage, null, TSeverity, EID_Default);////Validation for Splog Entries

            strMessage = null;
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations method 
        /// public void LogToOperations(string message, int eventId, EventLogEntryType severity)
        /// </summary>
        [TestMethod]//5
        public void LogToOperationsTest5()
        {
            //public void LogToOperations(string message, int eventId, EventLogEntryType severity)
            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.LogToOperations(strMessage, EID_Default, Severity);

            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strMessage, Severity);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage, null, TSeverity, EID_Default);////Validation for Splog Entries

            strMessage = null;
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations method 
        /// public void LogToOperations(string message, string category)
        /// </summary>
        [TestMethod]//6
        public void LogToOperationsTest6()
        {
            //public void LogToOperations(string message, string category)
            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");            
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.LogToOperations(strMessage, strDefaultCategory);

            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strMessage, Severity);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage,strDefaultCategory,TSeverity,EID_Default);////Validation for Splog Entries

            strMessage = null;
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations method 
        /// public void LogToOperations(string message, int eventId, string category)
        /// </summary>
        [TestMethod]//7
        public void LogToOperationsTest7()
        {
            //public void LogToOperations(string message, int eventId, string category)

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.LogToOperations(strMessage, EID_Default, strDefaultCategory);

            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strMessage, Severity);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage, strDefaultCategory, TSeverity, EID_Default);////Validation for Splog Entries

            strMessage = null;
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }       
        #endregion

        #region With Exception (5)

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations overload method which requires exception instance
        /// public void LogToOperations(Exception exception, string additionalMessage, int eventId,EventLogEntryType severity, string category)
        /// </summary>
        [TestMethod]//1
        public void LogToOperationsTest_WithExceptionMsg()
        {
            /*public void LogToOperations(Exception exception, string additionalMessage, int eventId,
                                             EventLogEntryType severity, string category)*/
            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + DateTime.Now.Ticks.ToString();
            Exception ex = new Exception(strExceptionMsg);

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.LogToOperations(ex, strMessage, EID_Default, EventLogEntryType.Error, strDefaultCategory);

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg, strDefaultCategory, TSeverity, EID_Default);////Validation for Splog Entries

            strMessage = string.Format("Category: {0}\n{1}", strDefaultCategory, strMessage);
            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strMessage, strExceptionMsg, Severity);//validation for event log entry
                        
            spLogger = null;
            ex = null;           

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");

        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations overload method which requires exception instance
        /// public void LogToOperations(Exception exception, string additionalMessage, int eventId)
        /// </summary>
        [TestMethod]//2
        public void LogToOperationsTest_WithExceptionMsg2()
        {
            /*public void LogToOperations(Exception exception, string additionalMessage, int eventId)*/
            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + DateTime.Now.Ticks.ToString();
            Exception ex = new Exception(strExceptionMsg);

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.LogToOperations(ex, strMessage, EID_Default);

            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strMessage, strExceptionMsg, Severity);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg, null, TSeverity, EID_Default);////Validation for Splog Entries            
                        
            spLogger = null;
            ex = null;
            
            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations overload method which requires exception instance
        /// public void LogToOperations(Exception exception, int eventId, EventLogEntryType severity,string category)
        /// </summary>
        [TestMethod]//3
        public void LogToOperationsTest_WithExceptionMsg3()
        {
            /*public void LogToOperations(Exception exception, int eventId, EventLogEntryType severity,string category)*/
            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + DateTime.Now.Ticks.ToString();
            Exception ex = new Exception(strExceptionMsg);            
            
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.LogToOperations(ex, EID_Default, Severity, strDefaultCategory);

            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strExceptionMsg, Severity);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg, strDefaultCategory, TSeverity, EID_Default);////Validation for Splog Entries            
                        
            spLogger = null;
            ex = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations overload method which requires exception instance
        /// public void LogToOperations(Exception exception)
        /// </summary>
        [TestMethod]//4
        public void LogToOperationsTest_WithExceptionMsg4()
        {
            /*public void LogToOperations(Exception exception)*/
            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + new Random(100).Next(100, 500);
            Exception ex = new Exception(strExceptionMsg);
            
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.LogToOperations(ex);

            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strExceptionMsg, Severity);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg,null,TSeverity,EID_Default);////Validation for Splog Entries            
                        
            spLogger = null;
            ex = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class LogToOperations overload method which requires exception instance
        /// public void LogToOperations(Exception exception, string additionalMessage)
        /// </summary>
        [TestMethod]//5
        public void LogToOperationsTest_WithExceptionMsg5()
        {
            /*public void LogToOperations(Exception exception, string additionalMessage)*/
            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + DateTime.Now.Ticks.ToString();
            Exception ex = new Exception(strExceptionMsg);

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");            
            EventLogEntryType Severity = EventLogEntryType.Error;
            TraceSeverity TSeverity = LogUtils.MapEventLogEntryTypesToTraceLogSeverity(Severity);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.LogToOperations(ex, strMessage);

            bool isValidEL = LogUtils.ValidateEventLog(strEventSourceName, EID_Default, strMessage, strExceptionMsg, Severity);//validation for event log entry

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg,null,TSeverity,EID_Default);////Validation for Splog Entries            
                        
            spLogger = null;
            ex = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
            Assert.IsTrue(isValidEL, "No entry is made in Event Logs");
        }
        
        #endregion
        #endregion      
        

        #region TraceToDeveloperTest Overloads (11)

        #region With Out Exception (6)
        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper method 
        /// public void TraceToDeveloper(string message, int eventId, TraceSeverity severity, string category)
        /// </summary>        
        [TestMethod]//1
        public void TraceToDeveloperTest()
        {
            //public void TraceToDeveloper(string message, int eventId, TraceSeverity severity, string category)          

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            int EID = new Random().Next(1, 20);            

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.TraceToDeveloper(strMessage, EID, DefaultSevirity, strDefaultCategory);
            
            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage,strDefaultCategory,DefaultSevirity,EID);//Validation for Splog Entries
                        
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper method 
        /// public void TraceToDeveloper(string message)
        /// </summary>        
        [TestMethod]//2
        public void TraceToDeveloperTest2()
        {
            //public void TraceToDeveloper(string message))          

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");            

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.TraceToDeveloper(strMessage);

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage, null, DefaultSevirity,EID_Default);//Validation for Splog Entries
                        
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper method 
        /// public void TraceToDeveloper(string message, TraceSeverity severity)
        /// </summary>        
        [TestMethod]//3
        public void TraceToDeveloperTest3()
        {
            //public void TraceToDeveloper(string message, TraceSeverity severity)          

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            
            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.TraceToDeveloper(strMessage, DefaultSevirity);

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage, null, DefaultSevirity,EID_Default);//Validation for Splog Entries
                        
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper method 
        /// public void TraceToDeveloper(string message, int eventId)
        /// </summary>        
        [TestMethod]//4
        public void TraceToDeveloperTest4()
        {
            //public void TraceToDeveloper(string message, int eventId)

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            int EID = new Random().Next(1, 20);

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.TraceToDeveloper(strMessage, EID);

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage, null, DefaultSevirity,EID);//Validation for Splog Entries
                        
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper method 
        /// public void TraceToDeveloper(string message, string category)
        /// </summary>        
        [TestMethod]//5
        public void TraceToDeveloperTest5()
        {
            //public void TraceToDeveloper(string message, string category)

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            
            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.TraceToDeveloper(strMessage,strDefaultCategory);

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage, strDefaultCategory, DefaultSevirity,EID_Default);//Validation for Splog Entries
            
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper method
        /// public void TraceToDeveloper(string message, int eventId, string category)
        /// </summary>        
        [TestMethod]//6
        public void TraceToDeveloperTest6()
        {
            //public void TraceToDeveloper(string message, int eventId, string category)

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            int EID = DateTime.Now.Millisecond + DateTime.Now.Second;

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger
            spLogger.TraceToDeveloper(strMessage, EID, strDefaultCategory);

            bool isValidSPL = LogUtils.ValidateSPLogs(strMessage, strDefaultCategory, DefaultSevirity,EID);//Validation for Splog Entries
                        
            spLogger = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        #endregion

        #region With Exception (5)

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper overload method which takes in exception instance
        /// public void TraceToDeveloper(Exception exception, string additionalMessage, int eventId,TraceSeverity severity, string category)
        /// </summary>
        [TestMethod]//1
        public void TraceToDeveloperTest_WithException()
        {
            /*public void TraceToDeveloper(Exception exception, string additionalMessage, int eventId,
                                              TraceSeverity severity, string category)  */

            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + DateTime.Now.Ticks.ToString();
            Exception ex = new Exception(strExceptionMsg);

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            int EID = DateTime.Now.Second+DateTime.Now.Millisecond;

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.TraceToDeveloper(ex, strMessage, EID, DefaultSevirity, strDefaultCategory);

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg, strDefaultCategory, DefaultSevirity,EID);//Validation for Splog Entries
                        
            spLogger = null;
            ex = null;

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper overload method which takes in exception instance
        /// public void TraceToDeveloper(Exception exception, int eventId, TraceSeverity severity, string category)
        /// </summary>
        [TestMethod]//2
        public void TraceToDeveloperTest_WithException2()
        {
            /*public void TraceToDeveloper(Exception exception, int eventId, TraceSeverity severity, string category) */

            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + new Random(100).Next(100, 500);
            Exception ex = new Exception(strExceptionMsg);

            //int EID = (int)DateTime.Now.Ticks;
            int EID = DateTime.Now.Second + DateTime.Now.Millisecond;

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.TraceToDeveloper(ex, EID, DefaultSevirity, strDefaultCategory);

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg, strDefaultCategory, DefaultSevirity, EID);//Validation for Splog Entries
                        
            spLogger = null;
            ex = null;
            
            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper overload method which takes in exception instance
        /// public void TraceToDeveloper(Exception exception)
        /// </summary>
        [TestMethod]//3
        public void TraceToDeveloperTest_WithException3()
        {
            /*public void TraceToDeveloper(Exception exception) */

            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + DateTime.Now.Ticks.ToString();
            Exception ex = new Exception(strExceptionMsg);
            
            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.TraceToDeveloper(ex);

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg,null, DefaultSevirity, EID_Default);//Validation for Splog Entries
                       
            spLogger = null;
            ex = null;
            
            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper overload method which takes in exception instance
        /// public void TraceToDeveloper(Exception exception, string additionalMessage)
        /// </summary>
        [TestMethod]//4
        public void TraceToDeveloperTest_WithException4()
        {
            /*public void TraceToDeveloper(Exception exception, string additionalMessage) */

            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + DateTime.Now.Ticks.ToString();
            Exception ex = new Exception(strExceptionMsg);

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");            

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.TraceToDeveloper(ex, strMessage);

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg, null, DefaultSevirity,EID_Default);//Validation for Splog Entries
                       
            spLogger = null;
            ex = null;            

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        /// <summary>
        /// Test Case to validate the Abstract BaseLogger class TraceToDeveloper overload method which takes in exception instance
        /// public void TraceToDeveloper(Exception exception, string additionalMessage, int eventId)
        /// </summary>
        [TestMethod]//5
        public void TraceToDeveloperTest_WithException5()
        {
            /*public void TraceToDeveloper(Exception exception, string additionalMessage, int eventId) */

            string strExceptionMsg = "Custom Exception Message by Automation code. Message No " + DateTime.Now.Ticks.ToString();
            Exception ex = new Exception(strExceptionMsg);

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");           
            int EID = DateTime.Now.Second + DateTime.Now.Millisecond;

            SharePointLogger spLogger = new SharePointLogger();//BaseLogger is abstract so we can use the SharePointLogger            
            spLogger.TraceToDeveloper(ex, strMessage, EID);

            bool isValidSPL = LogUtils.ValidateSPLogs(strExceptionMsg, null, DefaultSevirity, EID);//Validation for Splog Entries
                        
            spLogger = null;
            ex = null;            

            Assert.IsTrue(isValidSPL, "No entry is made in Share point Logs");
        }

        #endregion

        #endregion

        public TraceSeverity DefaultSevirity
        {
            get
            {
                return Severity;// = TraceSeverity.Medium;
            }
        }
    }
}
