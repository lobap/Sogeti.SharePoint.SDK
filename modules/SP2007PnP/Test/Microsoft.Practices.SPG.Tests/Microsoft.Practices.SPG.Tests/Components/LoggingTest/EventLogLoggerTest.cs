//===============================================================================
// Microsoft patterns & practices
// SharePoint Guidance version 2.0
//===============================================================================
// Copyright (c) Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LogModule =  Microsoft.Practices.SPG.Common;
//using Microsoft.Practices.SPG.Common.ServiceLocation;
//using Microsoft.Practices.SPG.Common.Configuration;

using System.Diagnostics;

namespace Microsoft.Practices.SPG.Tests.Components.Logging
{
    /// <summary>
    /// EventLogLoggerTest contains methods to test EventLogLogger
    /// </summary>
    [TestClass]
    public class EventLogLoggerTest
    {
        string strEventSourceName = string.Empty;//"Office SharePoint Server";
        string strCategory = "AutoTest Log Category";

        #region AutoGenerated
        public EventLogLoggerTest()
        {
            strEventSourceName = LogUtils.GetEventSource();//custom statement
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        #endregion
                
        /// <summary>
        /// Test Case to Test Log method of EventLogLogger
        /// </summary>
        [TestMethod]
        public void LogTest()
        {
            ////public void Log(string message, int eventId, EventLogEntryType severity, string category)

            string strMessage = "Custom Message by Automation Test Code. " + Guid.NewGuid().ToString("N");
            EventLogEntryType Severity = EventLogEntryType.Error;
            int EID =0;
            LogModule.Logging.EventLogLogger eLogger = new LogModule.Logging.EventLogLogger();
            eLogger.Log(strMessage, EID, EventLogEntryType.Error, strCategory);
            
            strMessage = string.Format("Category: {0}\n{1}", strCategory, strMessage);
            bool isValid = LogUtils.ValidateEventLog(strEventSourceName, EID, strMessage, Severity);
            eLogger = null;

            Assert.IsTrue(isValid, "Message did not get logged in Eventlog");            
        }

        /// <summary>
        /// Test Case to Test Log method of EventLogLogger with EID greater than 0
        /// </summary>
        [TestMethod]
        public void LogTest2()
        {
            ////public void Log(string message, int eventId, EventLogEntryType severity, string category)

            string strMessage = "Custom Message by Automation Test Code.EID>0. " + Guid.NewGuid().ToString("N");
            EventLogEntryType Severity = EventLogEntryType.Error;
            int EID = DateTime.Now.Second;
            LogModule.Logging.EventLogLogger eLogger = new LogModule.Logging.EventLogLogger();
            eLogger.Log(strMessage, EID, EventLogEntryType.Error, "");

            bool isValid = LogUtils.ValidateEventLog(strEventSourceName, EID, strMessage, Severity);
            eLogger = null;

            Assert.IsTrue(isValid, "Message did not get logged in Eventlog");            
        }                     
        
    }
}
